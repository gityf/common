// Copyright (c) 2015 Wang Yaofu.
// All right reserved.
//
// Author: Wang Yaofu voipman@qq.com
// Created: 2015/04/07
// Description:
// This file is generated with script, do not edit it directly!
// Please edit closure.py if needed.
//

#ifndef _COMMON_CLOSURE_H_
#define _COMMON_CLOSURE_H_

//#include "google/protobuf/message.h" // include google::protobuf::Closure
class ClosureA {
 public:
  ClosureA() {}
  virtual ~ClosureA() {};

  virtual void Run() = 0;
};

class ClosureBase {
public:
    virtual ~ClosureBase() {}
    virtual bool IsAutoDelete() const = 0;
};

// This is the main Template Class. Because we want to use the same name
// "Closure" for different type combination, we need to use template
// specialization.
template<
    typename R,
    typename A1 = void,
    typename A2 = void,
    typename A3 = void,
    typename A4 = void,
    typename A5 = void,
    typename A6 = void,
    typename A7 = void,
    typename A8 = void >
class Closure : public ClosureBase
{
public:
    virtual R Run(
        A1 a1,
        A2 a2,
        A3 a3,
        A4 a4,
        A5 a5,
        A6 a6,
        A7 a7,
        A8 a8
    ) = 0;
};

// The purpose of the following specialization is to be compatible with
// google::protobuf::Closure interface, the rpc stub generated by protobuf
// takes this as parameter.  The Closure template staff inherit from this
// interface, then the utilities provided following could help to create
// Closure instances for protobuf usage.
// DO NOT "using namespace google protobuf" in your code, otherwise the
// compiler will complain ambiguous definition error.
/*
template<>
class Closure<void> : public ClosureBase, public google::protobuf::Closure
{
public:
    virtual void Run() = 0;
};
*/
template<>
class Closure<void> : public ClosureBase, public ClosureA
{
public:
    virtual void Run() = 0;
};

template<
    typename R >
class Closure<R> : public ClosureBase
{
public:
    virtual R Run() = 0;
};

template<
    typename R,
    typename A1 >
class Closure<R, A1> : public ClosureBase
{
public:
    virtual R Run(A1) = 0;
};

template<
    typename R,
    typename A1,
    typename A2 >
class Closure<R, A1, A2> : public ClosureBase
{
public:
    virtual R Run(A1, A2) = 0;
};

template<
    typename R,
    typename A1,
    typename A2,
    typename A3 >
class Closure<R, A1, A2, A3> : public ClosureBase
{
public:
    virtual R Run(A1, A2, A3) = 0;
};

template<
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class Closure<R, A1, A2, A3, A4> : public ClosureBase
{
public:
    virtual R Run(A1, A2, A3, A4) = 0;
};

template<
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class Closure<R, A1, A2, A3, A4, A5> : public ClosureBase
{
public:
    virtual R Run(A1, A2, A3, A4, A5) = 0;
};

template<
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class Closure<R, A1, A2, A3, A4, A5, A6> : public ClosureBase
{
public:
    virtual R Run(A1, A2, A3, A4, A5, A6) = 0;
};

template<
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class Closure<R, A1, A2, A3, A4, A5, A6, A7> : public ClosureBase
{
public:
    virtual R Run(A1, A2, A3, A4, A5, A6, A7) = 0;
};

namespace closure {

template<bool del, typename T>
class SelfDeleter {
public:
    SelfDeleter(T* obj)
      : mObj(obj)
    {}
    ~SelfDeleter() {
        if (del) {
            delete mObj;
        }
    }
private:
    SelfDeleter(const SelfDeleter&);
    SelfDeleter& operator=(const SelfDeleter&);
private:
    T* mObj;
};

template<
    bool del,
    typename R,
    typename T >
class MethodClosure_0_0 : public Closure<R>
{
    typedef R (T::*Signature)();
public:
    MethodClosure_0_0(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)();
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1 >
class MethodClosure_0_1 : public Closure<R, A1>
{
    typedef R (T::*Signature)(A1);
public:
    MethodClosure_0_1(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1 >
class MethodClosure_1_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1);
public:
    MethodClosure_1_0(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2 >
class MethodClosure_0_2 : public Closure<R, A1, A2>
{
    typedef R (T::*Signature)(A1, A2);
public:
    MethodClosure_0_2(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2 >
class MethodClosure_1_1 : public Closure<R, A2>
{
    typedef R (T::*Signature)(A1, A2);
public:
    MethodClosure_1_1(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2 >
class MethodClosure_2_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2);
public:
    MethodClosure_2_0(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3 >
class MethodClosure_0_3 : public Closure<R, A1, A2, A3>
{
    typedef R (T::*Signature)(A1, A2, A3);
public:
    MethodClosure_0_3(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_3() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3 >
class MethodClosure_1_2 : public Closure<R, A2, A3>
{
    typedef R (T::*Signature)(A1, A2, A3);
public:
    MethodClosure_1_2(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3 >
class MethodClosure_2_1 : public Closure<R, A3>
{
    typedef R (T::*Signature)(A1, A2, A3);
public:
    MethodClosure_2_1(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3 >
class MethodClosure_3_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2, A3);
public:
    MethodClosure_3_0(T* obj, Signature func, A1 a1, A2 a2, A3 a3)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~MethodClosure_3_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class MethodClosure_0_4 : public Closure<R, A1, A2, A3, A4>
{
    typedef R (T::*Signature)(A1, A2, A3, A4);
public:
    MethodClosure_0_4(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_4() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class MethodClosure_1_3 : public Closure<R, A2, A3, A4>
{
    typedef R (T::*Signature)(A1, A2, A3, A4);
public:
    MethodClosure_1_3(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_3() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class MethodClosure_2_2 : public Closure<R, A3, A4>
{
    typedef R (T::*Signature)(A1, A2, A3, A4);
public:
    MethodClosure_2_2(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class MethodClosure_3_1 : public Closure<R, A4>
{
    typedef R (T::*Signature)(A1, A2, A3, A4);
public:
    MethodClosure_3_1(T* obj, Signature func, A1 a1, A2 a2, A3 a3)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~MethodClosure_3_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class MethodClosure_4_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2, A3, A4);
public:
    MethodClosure_4_0(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~MethodClosure_4_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_0_5 : public Closure<R, A1, A2, A3, A4, A5>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_0_5(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_5() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_1_4 : public Closure<R, A2, A3, A4, A5>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_1_4(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_4() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_2_3 : public Closure<R, A3, A4, A5>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_2_3(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_3() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_3_2 : public Closure<R, A4, A5>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_3_2(T* obj, Signature func, A1 a1, A2 a2, A3 a3)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~MethodClosure_3_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_4_1 : public Closure<R, A5>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_4_1(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~MethodClosure_4_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class MethodClosure_5_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5);
public:
    MethodClosure_5_0(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~MethodClosure_5_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_0_6 : public Closure<R, A1, A2, A3, A4, A5, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_0_6(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_6() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_1_5 : public Closure<R, A2, A3, A4, A5, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_1_5(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_5() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_2_4 : public Closure<R, A3, A4, A5, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_2_4(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_4() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_3_3 : public Closure<R, A4, A5, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_3_3(T* obj, Signature func, A1 a1, A2 a2, A3 a3)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~MethodClosure_3_3() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_4_2 : public Closure<R, A5, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_4_2(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~MethodClosure_4_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_5_1 : public Closure<R, A6>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_5_1(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~MethodClosure_5_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class MethodClosure_6_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6);
public:
    MethodClosure_6_0(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6)
    {}
    ~MethodClosure_6_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5, mA6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_0_7 : public Closure<R, A1, A2, A3, A4, A5, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_0_7(T* obj, Signature func)
      : mObj(obj),
        mFunc(func)
    {}
    ~MethodClosure_0_7() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(a1, a2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_1_6 : public Closure<R, A2, A3, A4, A5, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_1_6(T* obj, Signature func, A1 a1)
      : mObj(obj),
        mFunc(func),
        mA1(a1)
    {}
    ~MethodClosure_1_6() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, a2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_2_5 : public Closure<R, A3, A4, A5, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_2_5(T* obj, Signature func, A1 a1, A2 a2)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~MethodClosure_2_5() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_3_4 : public Closure<R, A4, A5, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_3_4(T* obj, Signature func, A1 a1, A2 a2, A3 a3)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~MethodClosure_3_4() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_4_3 : public Closure<R, A5, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_4_3(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~MethodClosure_4_3() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_5_2 : public Closure<R, A6, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_5_2(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~MethodClosure_5_2() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_6_1 : public Closure<R, A7>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_6_1(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6)
    {}
    ~MethodClosure_6_1() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run(A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5, mA6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
};

template<
    bool del,
    typename R,
    typename T,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class MethodClosure_7_0 : public Closure<R>
{
    typedef R (T::*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    MethodClosure_7_0(T* obj, Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7)
      : mObj(obj),
        mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6),
        mA7(a7)
    {}
    ~MethodClosure_7_0() {
        mObj = 0;
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mObj->*mFunc)(mA1, mA2, mA3, mA4, mA5, mA6, mA7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    T* mObj;
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
    A7 mA7;
};

template<
    bool del,
    typename R >
class FunctionClosure_0_0 : public Closure<R>
{
    typedef R (*Signature)();
public:
    FunctionClosure_0_0(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)();
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1 >
class FunctionClosure_0_1 : public Closure<R, A1>
{
    typedef R (*Signature)(A1);
public:
    FunctionClosure_0_1(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_1() {
        mFunc = 0;
    }
    virtual R Run(A1 a1) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1 >
class FunctionClosure_1_0 : public Closure<R>
{
    typedef R (*Signature)(A1);
public:
    FunctionClosure_1_0(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2 >
class FunctionClosure_0_2 : public Closure<R, A1, A2>
{
    typedef R (*Signature)(A1, A2);
public:
    FunctionClosure_0_2(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_2() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2 >
class FunctionClosure_1_1 : public Closure<R, A2>
{
    typedef R (*Signature)(A1, A2);
public:
    FunctionClosure_1_1(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_1() {
        mFunc = 0;
    }
    virtual R Run(A2 a2) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2 >
class FunctionClosure_2_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2);
public:
    FunctionClosure_2_0(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3 >
class FunctionClosure_0_3 : public Closure<R, A1, A2, A3>
{
    typedef R (*Signature)(A1, A2, A3);
public:
    FunctionClosure_0_3(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_3() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3 >
class FunctionClosure_1_2 : public Closure<R, A2, A3>
{
    typedef R (*Signature)(A1, A2, A3);
public:
    FunctionClosure_1_2(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_2() {
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3 >
class FunctionClosure_2_1 : public Closure<R, A3>
{
    typedef R (*Signature)(A1, A2, A3);
public:
    FunctionClosure_2_1(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_1() {
        mFunc = 0;
    }
    virtual R Run(A3 a3) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, a3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3 >
class FunctionClosure_3_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2, A3);
public:
    FunctionClosure_3_0(Signature func, A1 a1, A2 a2, A3 a3)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~FunctionClosure_3_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class FunctionClosure_0_4 : public Closure<R, A1, A2, A3, A4>
{
    typedef R (*Signature)(A1, A2, A3, A4);
public:
    FunctionClosure_0_4(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_4() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class FunctionClosure_1_3 : public Closure<R, A2, A3, A4>
{
    typedef R (*Signature)(A1, A2, A3, A4);
public:
    FunctionClosure_1_3(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_3() {
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class FunctionClosure_2_2 : public Closure<R, A3, A4>
{
    typedef R (*Signature)(A1, A2, A3, A4);
public:
    FunctionClosure_2_2(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_2() {
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, a3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class FunctionClosure_3_1 : public Closure<R, A4>
{
    typedef R (*Signature)(A1, A2, A3, A4);
public:
    FunctionClosure_3_1(Signature func, A1 a1, A2 a2, A3 a3)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~FunctionClosure_3_1() {
        mFunc = 0;
    }
    virtual R Run(A4 a4) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, a4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4 >
class FunctionClosure_4_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2, A3, A4);
public:
    FunctionClosure_4_0(Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~FunctionClosure_4_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_0_5 : public Closure<R, A1, A2, A3, A4, A5>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_0_5(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_5() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_1_4 : public Closure<R, A2, A3, A4, A5>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_1_4(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_4() {
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_2_3 : public Closure<R, A3, A4, A5>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_2_3(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_3() {
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, a3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_3_2 : public Closure<R, A4, A5>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_3_2(Signature func, A1 a1, A2 a2, A3 a3)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~FunctionClosure_3_2() {
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, a4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_4_1 : public Closure<R, A5>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_4_1(Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~FunctionClosure_4_1() {
        mFunc = 0;
    }
    virtual R Run(A5 a5) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, a5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5 >
class FunctionClosure_5_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5);
public:
    FunctionClosure_5_0(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~FunctionClosure_5_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_0_6 : public Closure<R, A1, A2, A3, A4, A5, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_0_6(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_6() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_1_5 : public Closure<R, A2, A3, A4, A5, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_1_5(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_5() {
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_2_4 : public Closure<R, A3, A4, A5, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_2_4(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_4() {
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, a3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_3_3 : public Closure<R, A4, A5, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_3_3(Signature func, A1 a1, A2 a2, A3 a3)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~FunctionClosure_3_3() {
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, a4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_4_2 : public Closure<R, A5, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_4_2(Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~FunctionClosure_4_2() {
        mFunc = 0;
    }
    virtual R Run(A5 a5, A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, a5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_5_1 : public Closure<R, A6>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_5_1(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~FunctionClosure_5_1() {
        mFunc = 0;
    }
    virtual R Run(A6 a6) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5, a6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6 >
class FunctionClosure_6_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6);
public:
    FunctionClosure_6_0(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6)
    {}
    ~FunctionClosure_6_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5, mA6);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_0_7 : public Closure<R, A1, A2, A3, A4, A5, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_0_7(Signature func)
      : mFunc(func)
    {}
    ~FunctionClosure_0_7() {
        mFunc = 0;
    }
    virtual R Run(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(a1, a2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_1_6 : public Closure<R, A2, A3, A4, A5, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_1_6(Signature func, A1 a1)
      : mFunc(func),
        mA1(a1)
    {}
    ~FunctionClosure_1_6() {
        mFunc = 0;
    }
    virtual R Run(A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, a2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_2_5 : public Closure<R, A3, A4, A5, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_2_5(Signature func, A1 a1, A2 a2)
      : mFunc(func),
        mA1(a1),
        mA2(a2)
    {}
    ~FunctionClosure_2_5() {
        mFunc = 0;
    }
    virtual R Run(A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, a3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_3_4 : public Closure<R, A4, A5, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_3_4(Signature func, A1 a1, A2 a2, A3 a3)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3)
    {}
    ~FunctionClosure_3_4() {
        mFunc = 0;
    }
    virtual R Run(A4 a4, A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, a4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_4_3 : public Closure<R, A5, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_4_3(Signature func, A1 a1, A2 a2, A3 a3, A4 a4)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4)
    {}
    ~FunctionClosure_4_3() {
        mFunc = 0;
    }
    virtual R Run(A5 a5, A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, a5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_5_2 : public Closure<R, A6, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_5_2(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5)
    {}
    ~FunctionClosure_5_2() {
        mFunc = 0;
    }
    virtual R Run(A6 a6, A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5, a6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_6_1 : public Closure<R, A7>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_6_1(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6)
    {}
    ~FunctionClosure_6_1() {
        mFunc = 0;
    }
    virtual R Run(A7 a7) {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5, mA6, a7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
};

template<
    bool del,
    typename R,
    typename A1,
    typename A2,
    typename A3,
    typename A4,
    typename A5,
    typename A6,
    typename A7 >
class FunctionClosure_7_0 : public Closure<R>
{
    typedef R (*Signature)(A1, A2, A3, A4, A5, A6, A7);
public:
    FunctionClosure_7_0(Signature func, A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7)
      : mFunc(func),
        mA1(a1),
        mA2(a2),
        mA3(a3),
        mA4(a4),
        mA5(a5),
        mA6(a6),
        mA7(a7)
    {}
    ~FunctionClosure_7_0() {
        mFunc = 0;
    }
    virtual R Run() {
        SelfDeleter<del, ClosureBase> deleter(this);
        return (mFunc)(mA1, mA2, mA3, mA4, mA5, mA6, mA7);
    }
    virtual bool IsAutoDelete() const {
        return del;
    }
private:
    Signature mFunc;
    A1 mA1;
    A2 mA2;
    A3 mA3;
    A4 mA4;
    A5 mA5;
    A6 mA6;
    A7 mA7;
};

} // namespace closure 

template<typename R, typename T>
Closure<R>* NewClosure(T* obj, R(T::*func)()) {
    return new closure::MethodClosure_0_0<true, R, T>(obj, func);
}

template<typename R, typename T, typename A1>
Closure<R, A1>* NewClosure(T* obj, R(T::*func)(A1)) {
    return new closure::MethodClosure_0_1<true, R, T, A1>(obj, func);
}

template<typename R, typename T, typename A1>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1), A1 a1) {
    return new closure::MethodClosure_1_0<true, R, T, A1>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R, A1, A2>* NewClosure(T* obj, R(T::*func)(A1, A2)) {
    return new closure::MethodClosure_0_2<true, R, T, A1, A2>(obj, func);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R, A2>* NewClosure(T* obj, R(T::*func)(A1, A2), A1 a1) {
    return new closure::MethodClosure_1_1<true, R, T, A1, A2>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_0<true, R, T, A1, A2>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A1, A2, A3>* NewClosure(T* obj, R(T::*func)(A1, A2, A3)) {
    return new closure::MethodClosure_0_3<true, R, T, A1, A2, A3>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A2, A3>* NewClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1) {
    return new closure::MethodClosure_1_2<true, R, T, A1, A2, A3>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A3>* NewClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_1<true, R, T, A1, A2, A3>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_0<true, R, T, A1, A2, A3>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A1, A2, A3, A4>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4)) {
    return new closure::MethodClosure_0_4<true, R, T, A1, A2, A3, A4>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A2, A3, A4>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1) {
    return new closure::MethodClosure_1_3<true, R, T, A1, A2, A3, A4>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A3, A4>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_2<true, R, T, A1, A2, A3, A4>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A4>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_1<true, R, T, A1, A2, A3, A4>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_0<true, R, T, A1, A2, A3, A4>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A1, A2, A3, A4, A5>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5)) {
    return new closure::MethodClosure_0_5<true, R, T, A1, A2, A3, A4, A5>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A2, A3, A4, A5>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1) {
    return new closure::MethodClosure_1_4<true, R, T, A1, A2, A3, A4, A5>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A3, A4, A5>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_3<true, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A4, A5>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_2<true, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A5>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_1<true, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_0<true, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A1, A2, A3, A4, A5, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6)) {
    return new closure::MethodClosure_0_6<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A2, A3, A4, A5, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1) {
    return new closure::MethodClosure_1_5<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A3, A4, A5, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_4<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A4, A5, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_3<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A5, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_2<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A6>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_1<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::MethodClosure_6_0<true, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A1, A2, A3, A4, A5, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7)) {
    return new closure::MethodClosure_0_7<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A2, A3, A4, A5, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1) {
    return new closure::MethodClosure_1_6<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A3, A4, A5, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_5<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A4, A5, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_4<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A5, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_3<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A6, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_2<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A7>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::MethodClosure_6_1<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R>* NewClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
    return new closure::MethodClosure_7_0<true, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5, a6, a7);
}

template<typename R, typename T>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)()) {
    return new closure::MethodClosure_0_0<false, R, T>(obj, func);
}

template<typename R, typename T, typename A1>
Closure<R, A1>* NewPermanentClosure(T* obj, R(T::*func)(A1)) {
    return new closure::MethodClosure_0_1<false, R, T, A1>(obj, func);
}

template<typename R, typename T, typename A1>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1), A1 a1) {
    return new closure::MethodClosure_1_0<false, R, T, A1>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R, A1, A2>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2)) {
    return new closure::MethodClosure_0_2<false, R, T, A1, A2>(obj, func);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R, A2>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2), A1 a1) {
    return new closure::MethodClosure_1_1<false, R, T, A1, A2>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_0<false, R, T, A1, A2>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A1, A2, A3>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3)) {
    return new closure::MethodClosure_0_3<false, R, T, A1, A2, A3>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A2, A3>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1) {
    return new closure::MethodClosure_1_2<false, R, T, A1, A2, A3>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R, A3>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_1<false, R, T, A1, A2, A3>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_0<false, R, T, A1, A2, A3>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A1, A2, A3, A4>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4)) {
    return new closure::MethodClosure_0_4<false, R, T, A1, A2, A3, A4>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A2, A3, A4>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1) {
    return new closure::MethodClosure_1_3<false, R, T, A1, A2, A3, A4>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A3, A4>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_2<false, R, T, A1, A2, A3, A4>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R, A4>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_1<false, R, T, A1, A2, A3, A4>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_0<false, R, T, A1, A2, A3, A4>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A1, A2, A3, A4, A5>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5)) {
    return new closure::MethodClosure_0_5<false, R, T, A1, A2, A3, A4, A5>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A2, A3, A4, A5>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1) {
    return new closure::MethodClosure_1_4<false, R, T, A1, A2, A3, A4, A5>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A3, A4, A5>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_3<false, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A4, A5>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_2<false, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A5>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_1<false, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_0<false, R, T, A1, A2, A3, A4, A5>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A1, A2, A3, A4, A5, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6)) {
    return new closure::MethodClosure_0_6<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A2, A3, A4, A5, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1) {
    return new closure::MethodClosure_1_5<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A3, A4, A5, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_4<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A4, A5, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_3<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A5, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_2<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A6>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_1<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::MethodClosure_6_0<false, R, T, A1, A2, A3, A4, A5, A6>(obj, func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A1, A2, A3, A4, A5, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7)) {
    return new closure::MethodClosure_0_7<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A2, A3, A4, A5, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1) {
    return new closure::MethodClosure_1_6<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A3, A4, A5, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2) {
    return new closure::MethodClosure_2_5<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A4, A5, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3) {
    return new closure::MethodClosure_3_4<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A5, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::MethodClosure_4_3<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A6, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::MethodClosure_5_2<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A7>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::MethodClosure_6_1<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename T, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R>* NewPermanentClosure(T* obj, R(T::*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
    return new closure::MethodClosure_7_0<false, R, T, A1, A2, A3, A4, A5, A6, A7>(obj, func, a1, a2, a3, a4, a5, a6, a7);
}

template<typename R>
Closure<R>* NewClosure(R(*func)()) {
    return new closure::FunctionClosure_0_0<true, R>(func);
}

template<typename R, typename A1>
Closure<R, A1>* NewClosure(R(*func)(A1)) {
    return new closure::FunctionClosure_0_1<true, R, A1>(func);
}

template<typename R, typename A1>
Closure<R>* NewClosure(R(*func)(A1), A1 a1) {
    return new closure::FunctionClosure_1_0<true, R, A1>(func, a1);
}

template<typename R, typename A1, typename A2>
Closure<R, A1, A2>* NewClosure(R(*func)(A1, A2)) {
    return new closure::FunctionClosure_0_2<true, R, A1, A2>(func);
}

template<typename R, typename A1, typename A2>
Closure<R, A2>* NewClosure(R(*func)(A1, A2), A1 a1) {
    return new closure::FunctionClosure_1_1<true, R, A1, A2>(func, a1);
}

template<typename R, typename A1, typename A2>
Closure<R>* NewClosure(R(*func)(A1, A2), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_0<true, R, A1, A2>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A1, A2, A3>* NewClosure(R(*func)(A1, A2, A3)) {
    return new closure::FunctionClosure_0_3<true, R, A1, A2, A3>(func);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A2, A3>* NewClosure(R(*func)(A1, A2, A3), A1 a1) {
    return new closure::FunctionClosure_1_2<true, R, A1, A2, A3>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A3>* NewClosure(R(*func)(A1, A2, A3), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_1<true, R, A1, A2, A3>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R>* NewClosure(R(*func)(A1, A2, A3), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_0<true, R, A1, A2, A3>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A1, A2, A3, A4>* NewClosure(R(*func)(A1, A2, A3, A4)) {
    return new closure::FunctionClosure_0_4<true, R, A1, A2, A3, A4>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A2, A3, A4>* NewClosure(R(*func)(A1, A2, A3, A4), A1 a1) {
    return new closure::FunctionClosure_1_3<true, R, A1, A2, A3, A4>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A3, A4>* NewClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_2<true, R, A1, A2, A3, A4>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A4>* NewClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_1<true, R, A1, A2, A3, A4>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R>* NewClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_0<true, R, A1, A2, A3, A4>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A1, A2, A3, A4, A5>* NewClosure(R(*func)(A1, A2, A3, A4, A5)) {
    return new closure::FunctionClosure_0_5<true, R, A1, A2, A3, A4, A5>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A2, A3, A4, A5>* NewClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1) {
    return new closure::FunctionClosure_1_4<true, R, A1, A2, A3, A4, A5>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A3, A4, A5>* NewClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_3<true, R, A1, A2, A3, A4, A5>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A4, A5>* NewClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_2<true, R, A1, A2, A3, A4, A5>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A5>* NewClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_1<true, R, A1, A2, A3, A4, A5>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R>* NewClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_0<true, R, A1, A2, A3, A4, A5>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A1, A2, A3, A4, A5, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6)) {
    return new closure::FunctionClosure_0_6<true, R, A1, A2, A3, A4, A5, A6>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A2, A3, A4, A5, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1) {
    return new closure::FunctionClosure_1_5<true, R, A1, A2, A3, A4, A5, A6>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A3, A4, A5, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_4<true, R, A1, A2, A3, A4, A5, A6>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A4, A5, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_3<true, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A5, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_2<true, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A6>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_1<true, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::FunctionClosure_6_0<true, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A1, A2, A3, A4, A5, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7)) {
    return new closure::FunctionClosure_0_7<true, R, A1, A2, A3, A4, A5, A6, A7>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A2, A3, A4, A5, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1) {
    return new closure::FunctionClosure_1_6<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A3, A4, A5, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_5<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A4, A5, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_4<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A5, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_3<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A6, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_2<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A7>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::FunctionClosure_6_1<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R>* NewClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
    return new closure::FunctionClosure_7_0<true, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5, a6, a7);
}

template<typename R>
Closure<R>* NewPermanentClosure(R(*func)()) {
    return new closure::FunctionClosure_0_0<false, R>(func);
}

template<typename R, typename A1>
Closure<R, A1>* NewPermanentClosure(R(*func)(A1)) {
    return new closure::FunctionClosure_0_1<false, R, A1>(func);
}

template<typename R, typename A1>
Closure<R>* NewPermanentClosure(R(*func)(A1), A1 a1) {
    return new closure::FunctionClosure_1_0<false, R, A1>(func, a1);
}

template<typename R, typename A1, typename A2>
Closure<R, A1, A2>* NewPermanentClosure(R(*func)(A1, A2)) {
    return new closure::FunctionClosure_0_2<false, R, A1, A2>(func);
}

template<typename R, typename A1, typename A2>
Closure<R, A2>* NewPermanentClosure(R(*func)(A1, A2), A1 a1) {
    return new closure::FunctionClosure_1_1<false, R, A1, A2>(func, a1);
}

template<typename R, typename A1, typename A2>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_0<false, R, A1, A2>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A1, A2, A3>* NewPermanentClosure(R(*func)(A1, A2, A3)) {
    return new closure::FunctionClosure_0_3<false, R, A1, A2, A3>(func);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A2, A3>* NewPermanentClosure(R(*func)(A1, A2, A3), A1 a1) {
    return new closure::FunctionClosure_1_2<false, R, A1, A2, A3>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R, A3>* NewPermanentClosure(R(*func)(A1, A2, A3), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_1<false, R, A1, A2, A3>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2, A3), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_0<false, R, A1, A2, A3>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A1, A2, A3, A4>* NewPermanentClosure(R(*func)(A1, A2, A3, A4)) {
    return new closure::FunctionClosure_0_4<false, R, A1, A2, A3, A4>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A2, A3, A4>* NewPermanentClosure(R(*func)(A1, A2, A3, A4), A1 a1) {
    return new closure::FunctionClosure_1_3<false, R, A1, A2, A3, A4>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A3, A4>* NewPermanentClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_2<false, R, A1, A2, A3, A4>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R, A4>* NewPermanentClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_1<false, R, A1, A2, A3, A4>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2, A3, A4), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_0<false, R, A1, A2, A3, A4>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A1, A2, A3, A4, A5>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5)) {
    return new closure::FunctionClosure_0_5<false, R, A1, A2, A3, A4, A5>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A2, A3, A4, A5>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1) {
    return new closure::FunctionClosure_1_4<false, R, A1, A2, A3, A4, A5>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A3, A4, A5>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_3<false, R, A1, A2, A3, A4, A5>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A4, A5>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_2<false, R, A1, A2, A3, A4, A5>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R, A5>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_1<false, R, A1, A2, A3, A4, A5>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_0<false, R, A1, A2, A3, A4, A5>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A1, A2, A3, A4, A5, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6)) {
    return new closure::FunctionClosure_0_6<false, R, A1, A2, A3, A4, A5, A6>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A2, A3, A4, A5, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1) {
    return new closure::FunctionClosure_1_5<false, R, A1, A2, A3, A4, A5, A6>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A3, A4, A5, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_4<false, R, A1, A2, A3, A4, A5, A6>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A4, A5, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_3<false, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A5, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_2<false, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R, A6>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_1<false, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::FunctionClosure_6_0<false, R, A1, A2, A3, A4, A5, A6>(func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A1, A2, A3, A4, A5, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7)) {
    return new closure::FunctionClosure_0_7<false, R, A1, A2, A3, A4, A5, A6, A7>(func);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A2, A3, A4, A5, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1) {
    return new closure::FunctionClosure_1_6<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A3, A4, A5, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2) {
    return new closure::FunctionClosure_2_5<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A4, A5, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3) {
    return new closure::FunctionClosure_3_4<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A5, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4) {
    return new closure::FunctionClosure_4_3<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A6, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5) {
    return new closure::FunctionClosure_5_2<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R, A7>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6) {
    return new closure::FunctionClosure_6_1<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5, a6);
}

template<typename R, typename A1, typename A2, typename A3, typename A4, typename A5, typename A6, typename A7>
Closure<R>* NewPermanentClosure(R(*func)(A1, A2, A3, A4, A5, A6, A7), A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7) {
    return new closure::FunctionClosure_7_0<false, R, A1, A2, A3, A4, A5, A6, A7>(func, a1, a2, a3, a4, a5, a6, a7);
}

#endif // _COMMON_CLOSURE_H_
